INTERMEDIATE CODE SPECIFICATION
---------------------------------------------------------------------------------------------------
Syntax for 3AC: line_number, operator, arg1, [arg2, ...]

Details:
1. Mathematical Operations ['+', '-', '*', '/', '%']
line, operator, destination, arg1, arg2
2. Function Calls
line, call, function_name
3. Code Labels
line, label, label_name
4. Conditional Jumps ['<=', '>=', '==', '>', '<', '!=']
line, ifgoto, condition, operand1, operand2, line_to_jump_to
5. Unconditional Jumps
line, goto, line_to_jump_to
6. Exit Call
line, exit
7. Print Instruction
line, print, variable_name
8. Assignement Instruction
line, =, destination_var, source_var
9. Function Definitions
line, function, function_name
10. Return from Function
line, return
1. Relational Operations ['&&', '||', '~']
line, operator, destination, arg1, [arg2, ...]

Note that the function definitions must be in the end of the program



Installations for running ARM assembly in terminal
---------------------------------------------------------------------------------------------------
sudo apt-get install gcc-arm-linux-gnueabihf qemu-user-static




GENERATING THE ASSEMBLY CODE
---------------------------------------------------------------------------------------------------
python codegen.py test1.ir > test1.s




RUNNING THE GENERATED ASSEMBLY CODE
---------------------------------------------------------------------------------------------------
arm-linux-gnueabihf-gcc -o a.out test1.s
qemu-arm-static -L /usr/arm-linux-gnueabihf a.out





THE DESCRIPTION OF DATA STRUCTURES DEFINED IN CODEGEN.PY IS AS FOLLOWS:
---------------------------------------------------------------------------------------------------
1. reglist
List for general purpose registers
2. registers
dictionary to keep record of register contents
3. varlist
The list of variable names of Intermediate Code
4. addressDescriptor
A dictionary for tracking the current address of the program variables
5. tackeywords
The list of the keywords

THE DESCRIPTION OF THE FUNCTIONS DEFINED IN CODEGEN.PY IS AS FOLLOWS:
---------------------------------------------------------------------------------------------------
1. isnumber(num)
Checks input is a number (positive or negative ,not floating point).
2. setregister(register, content) 
Puts content in specified register.
3. getReg(variable, instrno) : 
getReg takes the variable and instruction number as parameters and implements the spilling. It gets the register from the nextuseTable.
4. translate(instruction) 
take instructions and generate a assembly code
5. getlocation(variable) 
Returns the location of a variable from address descriptor table. Return value is the register where the variable is located or "mem".
6. setlocation(variable, location) : 
Modifies address descriptor table entry for the particular variable and assigns it to the given location.
